USE lesson_4;

/*
1. Создайте таблицу users_old, аналогичную таблице users. 
Создайте процедуру, с помощью которой можно переместить любого (одного) пользователя из таблицы users в таблицу users_old. 
(использование транзакции с выбором commit или rollback – обязательно).
*/

#Создаём проверку на наличие уже ранее созданной таблицы и если таковая имеется удаляем её.
DROP TABLE IF EXISTS users_old;

#Создаём таблицу схожую по структуре с таблицей users количество символов можно было бы сделать меньше, но по заданию нужна аналогичная)
CREATE TABLE users_old (id INT PRIMARY KEY auto_increment, firstname varchar(50), lastname varchar(50), email varchar(120));

#Изменяем разделитель, чтобы не возникало конфликта со стандартной ;
DELIMITER //

#Создаём проверку на наличие созданной ранее процедуры, и если таковая была удаляем её
DROP PROCEDURE IF EXISTS user_change_table;

#Создаём (пересоздаём) процедуру c именем user_change_table, которая на вход будет принимать некоторое целое число)
#Процедура детерминированная, так как при одном наборе параметров IN и IN OUT она всегда возвращает одно и то же значение.
CREATE PROCEDURE  user_change_table(IN selected_id_user INT) DETERMINISTIC 
BEGIN

#Производим выборку необходимых данных из таблицы users и переносим их (копируем) в таблицу users_old исходя из того какой id пользователя мы указали при вызове процедуры
INSERT INTO users_old (firstname,lastname,email) SELECT firstname, lastname, email FROM users WHERE users.id = selected_id_user;

#Удаляем пользователя в таблице users, чтобы данные о нём остались теперь только в таблице users_old
DELETE FROM users WHERE id = selected_id_user;

#Фиксируем изменения и завершаем процедуру
COMMIT;
END//

#Возвращаем разделитель в виде ; (хороший тон) и вызываем процедуру для проверки с указанием id пользователя, которого нужно перенести
DELIMITER ;
CALL user_change_table(5);

/*****************************************************************************/

/*
2. Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени суток. 
С 4:00 до 11:00 функция должна возвращать фразу"Доброе утро", 
с 12:00 до 16:00 функция должна возвращать фразу "Добрый день", 
с 17:00 до 23:00 — "Добрый вечер", 
с 00:00 до 3:00 — "Доброй ночи".
*/


#Для корректной работы функции заменяем разделитель с ; на //
DELIMITER //

#Создаём функцию с указанием какой тип данных она будет возвращать (набор символов не более 20)
DROP FUNCTION IF EXISTS hello;
CREATE FUNCTION hello() RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
DECLARE result VARCHAR(20);

#Через связку CASE получаем от текущее время и сравниваем его с шаблоном диапазона времени. При определении соответствия вставляем в результат result строку в виде текста.
#Можно было бы сделать без привязки к полному формату времени и ориентироваться только на часы, но так получается точнее:
SELECT CASE 
	WHEN CURRENT_TIME >= '04:00:00' AND  CURRENT_TIME < '12:00:00' THEN 'Доброе утро!'
	WHEN CURRENT_TIME >= '12:00:00' AND  CURRENT_TIME < '17:00:00' THEN 'Добрый день!'
	WHEN CURRENT_TIME >= '17:00:00' AND  CURRENT_TIME < '00:00:00' THEN 'Доброй вечер!'
    WHEN CURRENT_TIME >= '00:00:00' AND  CURRENT_TIME < '04:00:00' THEN 'Доброй ночи!'
END INTO result;

#Возвращаем результат в функцию.
RETURN result;
END//

#Возвращаем разделитель в виде ; (хороший тон)
DELIMITER ;

#Вызываем функцию для проверки
SELECT hello();


